Vector2 = {}
function Vector2.new(x, y)
    return { X = x, Y = y, __vector2 = true }
end

local function pascal_to_kebab(str)
    return str:gsub("(%u)", function(c)
        return "-" .. c:lower()
    end):gsub("^-", "")
end


local function is_array(t)
    local i = 0
    for k in pairs(t) do
        i = i + 1
        if t[i] == nil then
            return false
        end
    end
    return true
end

local function convert(data)
    local new_icons = {}

    for name, icon in pairs(data.Icons) do
        local new_name = pascal_to_kebab(name)
        local new_icon = {}

        for k, v in pairs(icon) do
            if k == "Parts" and type(v) == "table" then
                if is_array(v) then
                    local new_parts = {}
                    for i, part in ipairs(v) do
                        if type(part) == "string" then
                            new_parts[#new_parts + 1] = pascal_to_kebab(part)
                        end
                    end
                    new_icon[k] = new_parts
                else
                    local new_parts = {}
                    for key, val in pairs(v) do
                        if type(key) == "string" then
                            new_parts[pascal_to_kebab(key)] = val
                        end
                    end
                    new_icon[k] = new_parts
                end
            else
                new_icon[k] = v
            end
        end

        new_icons[new_name] = new_icon
    end

    return {
        Spritesheets = data.Spritesheets,
        Icons = new_icons,
    }
end

local reserved = {
    ["and"]=true, ["break"]=true, ["do"]=true, ["else"]=true,
    ["elseif"]=true, ["end"]=true, ["false"]=true, ["for"]=true,
    ["function"]=true, ["goto"]=true, ["if"]=true, ["in"]=true,
    ["local"]=true, ["nil"]=true, ["not"]=true, ["or"]=true,
    ["repeat"]=true, ["return"]=true, ["then"]=true, ["true"]=true,
    ["until"]=true, ["while"]=true,
}

local function is_valid_identifier(str)
    return str:match("^[a-zA-Z_][a-zA-Z0-9_]*$") and not reserved[str]
end

local function sorted_keys(tbl)
    local keys = {}
    for k in pairs(tbl) do
        table.insert(keys, k)
    end
    table.sort(keys, function(a, b)
        return tostring(a) < tostring(b)
    end)
    return keys
end

local function serialize(tbl, indent)
    indent = indent or 0
    local lines = {}
    local prefix = string.rep(" ", indent)

    if type(tbl) ~= "table" then
        if type(tbl) == "string" then
            return string.format("%q", tbl)
        else
            return tostring(tbl)
        end
    end

    if tbl.__vector2 then
        return string.format("Vector2.new(%d, %d)", tbl.X, tbl.Y)
    end

    table.insert(lines, "{")
    for _, k in ipairs(sorted_keys(tbl)) do
        if k ~= "__vector2" then
            local v = tbl[k]
            local key
            if type(k) == "string" and is_valid_identifier(k) then
                key = k
            else
                key = "[" .. string.format("%q", k) .. "]"
            end
            local value = serialize(v, indent + 4)
            table.insert(lines, string.rep(" ", indent + 4) .. key .. " = " .. value .. ",")
        end
    end
    table.insert(lines, prefix .. "}")
    return table.concat(lines, "\n")
end


local chunk = assert(loadfile("dist/Icons.lua"))
local data = chunk()

local new_data = convert(data)

local output = [[-- Generated by .ftgs 
-- Github: https://github.com/Footagesus

return {
]]
output = output .. "    Spritesheets = " .. serialize(new_data.Spritesheets, 4) .. ",\n"
output = output .. "    Icons = " .. serialize(new_data.Icons, 4) .. "\n"
output = output .. "}\n"


local f = assert(io.open("dist/Icons.lua", "w"))
f:write(output)
f:close()